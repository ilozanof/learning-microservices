# CustomerService configuration file:

# Application name. If this sercice is registered in Eureka Server, this is the name it will be used to refer it.
# Also, any Feign client declared to access it will have to use this name as well to refer it.
spring.application.name = customerService

# Server port for this app. In some jUnit cases, this port can be replaced with another one (random, for example)
server.port = 8081

# Eureka configuration. Here we specify the location of the Eureka Server, alomng with some properties we use to
# register on it (register-with-eureka), or to get information from it (fetch-registry), like when we are consuming
# other services registered there.

# When we use the Microservices running in the same JVM, without docker:
#eureka.client.service-url.defaultZone=http://localhost:8761/eureka/

# When we use the Microservices within Docker containers (they are containerized):
# In this case, instead of the eureka server IP address we use the container name:
# (make sure you name the eureka server container this way when you rn it):

# the reference
eureka.client.service-url.defaultZone=http://eureka:8761/eureka/
#eureka.client.service-url.defaultZone=http://localhost:8761/eureka/
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true

logging.level.com.netflix.eureka=OFF
logging.level.com.netflix.discovery=OFF

# The following properties are for simulating fail scenarios in the applicaiton, so we can test them.

# Probability of Failing. From 0 to 100. In case there is a failure, the business logic classes will throw an
# Exception (see CustomerManagerImpl).

customerService.fail.probability = 0

# Time to sleep in a call to the customer Service:
customerService.sleep.probability = 0
customerService.sleep.milisec = 3000

# This property enables our Feign client (CustomerServiceFeignclient) to include fallback capacities. If this
# option is not enabled, the fallback wonÂ´t work, even though the class is properly annotated.
feign.hystrix.enabled = true